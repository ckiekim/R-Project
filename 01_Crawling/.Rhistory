html_node('#list_for_view')
html %>%
html_node('#list_for_view') %>%
html_nodes('li')
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
li %>%
html_node('div.name._ccr\(lst\.from\)') %>%
html_node('a') %>%
html_text()
li %>%
html_node('div.name._ccr(lst\.from)') %>%
html_node('a') %>%
html_text()
li %>%
html_node('div.name._ccr(lst.from)') %>%
html_node('a') %>%
html_text()
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
for (li in lis) {
li %>%
html_node('div.name._ccr(lst.from)') %>%
html_node('a') %>%
html_text()
}
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
for (li in lis) {
li %>%
html_node('div.name._ccr(lst\.from)') %>%
html_node('a') %>%
html_text()
}
html %>%
html_node('#list_for_view') %>%
html_node('li') -> li
li
#html_nodes('li') -> lis
li %>%
html_node('div.name')
#html_nodes('li') -> lis
li %>%
html_node('div.name') %>%
html_node('a')
#html_nodes('li') -> lis
li %>%
html_node('div.name') %>%
html_text('a')
#html_nodes('li') -> lis
li %>%
html_node('div.name') %>%
html_node('a') %>% html_text()
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
li %>%
html_node('div.name')
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
lis
li <- lis[1]
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
for (i in 1:20) {
lis[i] %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
for (i in 1:20) {
lis[i] %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
#페이지 소스 읽어오기
html <- remDr$getPageSource()[[1]]
html <- read_html(html)
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
for (i in 1:20) {
lis[i] %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
li <- lis[1]
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
for (li in lis) {
print(li)
}
html %>%
html_node('#list_for_view') %>%
html_node('ol.mailList.sender_context') %>%
html_nodes('li') -> lis
for (li in lis) {
print(li)
}
for (li in lis) {
#print(li)
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
for (li in lis) {
print(li)
}
html %>%
html_node('#list_for_view') %>%
html_nodes('ol>li') -> lis
for (li in lis) {
print(li)
}
for (li in lis) {
#print(li)
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
sender <- c()
#print(li)
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') -> tmp
print(tmp)
}
mail_texts <- remDr$findElement(using="id", value="list_for_view")
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() -> tmp
print(tmp)
}
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
print(tmp)
}
mail_texts <- remDr$findElement(using="id", value="list_for_view")
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
print(str_sub(tmp, 7, -1))
}
subject <- c()
time <- c()
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('iDate') %>%
html_text() -> tmp
print(tmp)
}
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('.iDate') %>%
html_text() -> tmp
print(tmp)
}
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('.iDate') %>%
html_text() -> tmp
time <- c(time, str_sub(tmp, 6, -1))
}
df_mail <- data.frame(sender=sender, subject=subject, time=time)
sender <- c()
subject <- c()
time <- c()
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('.iDate') %>%
html_text() -> tmp
time <- c(time, str_sub(tmp, 6, -1))
}
df_mail <- data.frame(sender=sender, subject=subject, time=time)
df_mail
remDr$close()
# Google에 로그인한 후 gmail 가져오기
library(RSelenium)
library(rvest)
library(dplyr)
library(stringr)
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
remDr<-remoteDriver(remoteServerAddr="localhost", port=4445L, browserName="chrome")
remDr$open()
remDr$navigate("https://accounts.google.com/signin/v2/identifier?continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&service=mail&sacu=1&rip=1&flowName=GlifWebSignIn&flowEntry=ServiceLogin")
txt_id <- remDr$findElement(using="css selector", '#identifierId')
next_btn <- remDr$findElement(using="css selector", '.RveJvd.snByac')
txt_id$setElementAttribute("value", "ckiekim@gmail.com")     # 아이디 입력
next_btn$clickElement()
txt_pw <- remDr$findElement(using="css selector", '.whsOnd.zHQkBf')
next_btn <- remDr$findElement(using="css selector", '.RveJvd.snByac')
txt_pw$sendKeysToElement(list("kim11067"))
next_btn$clickElement()
html <- remDr$getPageSource()[[1]]
html <- read_html(html)
html %>%
html_node('table.F.cf.zt') %>%
html_nodes('tbody>tr') -> trs
sender <- c()
subject <- c()
time <- c()
for (tr in trs) {
tr %>%
html_node('td.yX.xY') %>%
html_node('div') %>%
html_nodes('span') -> spans
len <- length(spans)
sender <- c(sender, html_text(spans[1]))       # Sender
subject <- c(subject, html_text(spans[len-1]))     # Subject
time <- c(time, html_text(spans[len]))           # Time
}
df_mail <- data.frame(sender=sender, subject=subject, time=time)
df_mail
remDr$close()
states.cor <- cor(states[2:5])
# 다중회귀분석
state.x77
states <- as.data.frame(state.x77[,c("Murder","Population",
"Illiteracy","Income","Frost")])
fit <- lm(Murder ~ Population+Illiteracy+Income+Frost, data=states)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
states.cor <- cor(states[2:5])
states.cor
# VIF 계산
summary(vif(fit))
library(car)
install.packages('car')
# VIF 계산
library(car)
summary(vif(fit))
summary(vif(fit))
fit1 <- lm(Murder ~ ., data=states)
vif(fit)
# Condition Number
eigen.val <- eigen(states.cor)$values
eigen.val
sqrt(max(eigen.val)/eigen.val)
library(rJava)
library(KoNLP)
students <- c('김상규', '김영진', '김준성', '김희범', '남궁하영', '류경민',
'민다희', '박성지', '박수민', '박진원', '신은총', '안수현',
'오진영', '이경욱', '이웅희', '이희철', '임도균', '임원기',
'전수연', '조병무', '최용호', '최준혁', '황성윤')
sample(x=1:23)
for (i in sample(x=1:23)) {
print(students[i])
}
for (i in sample(x=1:23)) {
print(students[i])
}
for (i in sample(x=1:23)) {
print(students[i])
}
print(group)
for (group in sample(x=1:6)) {
print(group)
}
# NAVER 영화('알라딘') 네티즌 리뷰 크롤링
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
url_base <- 'https://movie.naver.com'
start_url <- '/movie/bi/mi/point.nhn?code=163788'
url <- paste0(url_base, start_url)
html <- read_html(url)
html %>%
html_node('iframe.ifr') %>%
html_attr('src') -> if_url
ifr_url <- paste0(url_base, if_url)
html2 <- read_html(ifr_url)
html2 %>%
html_node('div.score_total') %>%
html_nodes('em') -> ems
pages <- ems[2] %>% html_text()
pages <- gsub(",", "", pages)
total_page <- ceiling(as.numeric(pages)/10)
total_page
html2 %>%
html_node('div.paging') %>%
html_node('a') %>%
html_attr('href') -> tmp
page_url_base <- str_sub(tmp, 1, -2)
df_points <- data.frame(score=c(), review=c(), writer=c(), time=c())
for (i in 1:total_page) {
if (i %% 100 == 0)
print(i)
page_url <- paste0(url_base, page_url_base, i)
html <- read_html(page_url)
html %>%
html_node('div.score_result') %>%
html_nodes('li') -> lis
score <- c()
review <- c()
writer <- c()
time <- c()
for (li in lis) {
score <- c(score, html_node(li, '.star_score') %>% html_text('em') %>% trim())
li %>%
html_node('.score_reple') %>%
html_text('p') %>%
trim() -> tmp
idx <- str_locate(tmp, "\r")
rev <- str_sub(tmp, 1, idx[1]-1)
#print(rev)
review <- c(review, rev)
tmp <- trim(str_sub(tmp, idx[1], -1))
idx <- str_locate(tmp, "\r")
writer <- c(writer, str_sub(tmp, 1, idx[1]-1))
tmp <- trim(str_sub(tmp, idx[1], -1))
idx <- str_locate(tmp, "\r")
time <- c(time, str_sub(tmp, 1, idx[1]-1))
}
points <- data.frame(score=score, review=review, writer=writer, time=time)
df_points <- rbind.data.frame(df_points, points)
}
write.xlsx(df_points, file="D:/Workspace/R_Project/01_Crawling/aladdin.xlsx",
sheetName="네티즌평점",
col.names=TRUE, row.names=FALSE, append=FALSE)
reply <- review
library(wordcloud)
library(ggplot2)
library(extrafont)
windowsFonts(myfont = "맑은 고딕")
theme_update(text=element_text(family="myfont"))
useSejongDic()
setwd("D:/Workspace/R_Project/01_Crawling")
write.csv(reply, "reply1.csv", row.names = F)
aladdin <- read.xlsx("aladdin.xlsx", 1, encoding="UTF-8")
reply <- aladdin$review
write.csv(reply, "reply1.csv", row.names = F)
lines <- readLines("reply1.csv")
words <- sapply(lines, extractNoun, USE.NAMES = F)
warnings()
head(reply)
str(words)
write.table(reply, "reply1.txt", row.names = F)
lines <- readLines("reply1.txt")
words <- sapply(lines, extractNoun, USE.NAMES = F)
write.table(reply, "reply1.txt", row.names = F, quote = F)
lines <- readLines("reply1.txt")
words <- sapply(lines, extractNoun, USE.NAMES = F)
words <- str_replace_all(unlist(words), "[^[:alpha:]]", "")
words <- gsub(" ", "", words)
words <- gsub("\\d+", "", words)
words <- Filter(function(x) {nchar(x) >= 2}, words)
words <- Filter(function(x) {nchar(x) <= 5}, words)
head(words, 20)
str(words)
words
raw_words <- sapply(lines, extractNoun, USE.NAMES = F)
str(raw_words)
words <- str_replace_all(unlist(raw_words), "[^[:alpha:]]", "")
str(words)
words <- gsub(" ", "", words)
str(words)
words <- gsub("\\d+", "", words)
words <- gsub("\\d+", "", words)
str(words)
words <- Filter(function(x) {nchar(x) >= 2}, words)
words <- Filter(function(x) {nchar(x) >= 2}, words)
str(words)
words <- Filter(function(x) {nchar(x) <= 5}, words)
str(words)
words <- str_replace_all(unlist(raw_words), "[^[:alpha:]]", "")
words <- gsub(" ", "", words)
words <- gsub("\\d+", "", words)
words <- Filter(function(x) {nchar(x) >= 2}, words)
head(words, 20)
words <- unlist(raw_words)
str(words)
head(words, -20)
words <- Filter(function(x) {nchar(x) >= 2}, words)
words <- Filter(function(x) {nchar(x) <= 9}, words)
str(words)
words
words <- unlist(raw_words)
words <- str_replace_all(words, "[^[:alpha:]]", "")
head(words, 20)
str(words)
words <- Filter(function(x) {nchar(x) >= 2}, words)
str(words)
words <- Filter(function(x) {nchar(x) <= 9}, words)
str(words)
words <- str_replace_all(words, "[^[:alpha:]]", "")
words <- unlist(raw_words)
words <- str_replace_all(words, "[^[:alpha:]]", "")
words <- Filter(function(x) {nchar(x) >= 2}, words)
words <- Filter(function(x) {nchar(x) <= 10}, words)
str(words)
words <- unlist(raw_words)
words <- str_replace_all(words, "[^[:alpha:]]", "")
words <- Filter(function(x) {nchar(x) >= 2}, words)
words <- Filter(function(x) {nchar(x) <= 20}, words)
str(words)
raw_words
raw_words
noun_words <- extractNoun(raw_words)
