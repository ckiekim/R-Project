}
funwords <- c('재밌게','재밌고','재밌었','재밌어요','재밌네요',
'재밌었고','재밌었음','재밌었어요')
for (funword in funwords) {
words <- gsub(funword, '재미', words)
}
write(words, "reply1.txt")
reviews <- read.table("reply1.txt")
wordcount <- table(reviews)
head(sort(wordcount, decreasing = T), 30)
windowsFonts(font=windowsFont("맑은 고딕"))
set.seed(123)
palete <- brewer.pal(12, 'Paired')
par(mai=rep(0,4))
wordcloud(names(wordcount), freq=wordcount,
scale = c(5,0.3), rot.per = 0.1,
min.freq = 20, random.order = F,
random.color = T, colors = palete, family="font")
wordcount_top <-head(sort(wordcount, decreasing = T), 300)
wordcloud2(wordcount_top, size=4, col="random-light",
backgroundColor="grey")
install.packages('wordcloud2')
library(wordcloud2)
wordcloud2(wordcount_top, size=4, col="random-light",
backgroundColor="grey")
wordcloud2(wordcount_top, size=3, col="random-light",
backgroundColor="grey")
wordcount_top
wordcloud(names(wordcount), freq=wordcount,
scale = c(5,0.3), rot.per = 0.1,
min.freq = 20, random.order = F,
random.color = T, colors = palete, family="myfont")
# 2. 평점 분석하기
point_date <- strptime(aladdin$time, '%Y.%m.%d')
table(point_date)
head(point_date)
head(point_date, 20)
tail(point_date, 20)
aladdin$date <- as.character(point_date)
aladdin$hour <- as.character(strptime(aladdin$time, "%Y.%m.%d %H"))
tail(aladdin, 20)
head(aladdin)
df_aladdin <- aladdin
df_aladdin$score <- as.numeric(as.character(df_aladdin$score))
head(aladdin)
table(df_aladdin$date)
# 5/23 ~ 7/7 까지 평점 변화
# 평점 갯수
df_aladdin <- filter(df_aladdin, date !='2019-07-08')
count_review <- df_aladdin %>%
group_by(date) %>%
tally()
count_review
count_score_plot <- ggplot(data=count_review,
aes(x=date, y=n, group=1)) +
geom_line(color = 'red') +
ggtitle('일별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15, vjust=2))
# 평점 평균
mean_review <- df_aladdin %>%
group_by(date) %>%
summarise(mean_point = mean(score, na.rm = T))
# 평점 평균
mean_score <- df_aladdin %>%
group_by(date) %>%
summarise(mean_point = mean(score, na.rm = T))
mean_score_plot <- ggplot(data=mean_score,
aes(x=date, y=mean_point, group=1)) +
geom_line(color = 'red')+
ggtitle('일별 평점 평균 추이')+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(size = 15, vjust=2))
grid.arrange(mean_score_plot,count_score_plot)
library(gridExtra)
grid.arrange(mean_score_plot,count_score_plot)
mean_score_plot <- ggplot(data=mean_score,
aes(x=date, y=mean_point, group=1)) +
geom_line(color = 'red')+
ggtitle('일별 평점 평균 추이')+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15, vjust=2))
grid.arrange(mean_score_plot,count_score_plot)
df_aladdin$date <- str_sub(df_aladdin$date, 6)
count_review <- df_aladdin %>%
group_by(date) %>%
tally()
count_score_plot <- ggplot(data=count_review,
aes(x=date, y=n, group=1)) +
geom_line(color = 'red') +
ggtitle('일별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15, vjust=2))
# 평점 평균
mean_score <- df_aladdin %>%
group_by(date) %>%
summarise(mean_point = mean(score, na.rm = T))
mean_score_plot <- ggplot(data=mean_score,
aes(x=date, y=mean_point, group=1)) +
geom_line(color = 'red')+
ggtitle('일별 평점 평균 추이')+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15, vjust=2))
grid.arrange(mean_score_plot,count_score_plot)
wordcloud2(wordcount_top, size=0.8, col="random-light",
backgroundColor="grey")
wordcloud2(wordcount_top, size=1, col="random-light",
backgroundColor="grey")
wordcloud2(wordcount_top, size=2, col="random-light",
backgroundColor="grey")
wordcloud2(wordcount_top, size=0.9, col="random-light",
backgroundColor="grey")
wordcloud2(wordcount_top, size=0.9, col="random-light",
backgroundColor="grey")
grid.arrange(mean_score_plot,count_score_plot)
wordcloud2(wordcount_top, size=0.9, col="random-light",
backgroundColor="grey")
wordcloud2(wordcount_top, size=0.9, col="random-light",
backgroundColor="black")
grid.arrange(mean_score_plot,count_score_plot)
count_score_plot <- ggplot(data=count_review,
aes(x=date, y=n, group=1)) +
geom_line(color = 'red') +
ggtitle('일별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
# 평점 평균
mean_score <- df_aladdin %>%
group_by(date) %>%
summarise(mean_point = mean(score, na.rm = T))
grid.arrange(mean_score_plot,count_score_plot)
mean_score_plot <- ggplot(data=mean_score,
aes(x=date, y=mean_point, group=1)) +
geom_line(color = 'red')+
ggtitle('일별 평점 평균 추이')+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
grid.arrange(mean_score_plot,count_score_plot)
grid.arrange(count_score_plot, mean_score_plot)
wordcloud2(wordcount_top, size=2, col="random-light",
backgroundColor="black", shape='circle')
wordcloud2(wordcount_top, size=2, col="random-light",
backgroundColor="black", shape='circle')
df_aladdin$hour
# 시간대별 평점 평균
df_aladdin$hour <- str_sub(df_aladdin$hour, 12, 13)
df_aladdin$hour
count_hour <- df_aladdin %>%
group_by(hour) %>%
tally()
count_hour_plot <- ggplot(data=count_review,
aes(x=hour, y=n, group=1)) +
geom_line(color = 'red') +
ggtitle('시간대별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
# 평점 평균
mean_hour <- df_aladdin %>%
group_by(hour) %>%
summarise(mean_hour = mean(score, na.rm = T))
mean_hour_plot <- ggplot(data=mean_hour,
aes(x=date, y=mean_hour, group=1)) +
geom_line(color = 'red') +
ggtitle('시간대별 평점 평균 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
grid.arrange(count_hour_plot, mean_hour_plot)
count_hour
count_hour_plot
count_hour_plot <- ggplot(data=count_hour,
aes(x=hour, y=n, group=1)) +
geom_line(color = 'red') +
ggtitle('시간대별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
# 평점 평균
mean_hour <- df_aladdin %>%
group_by(hour) %>%
summarise(mean_hour = mean(score, na.rm = T))
mean_hour_plot <- ggplot(data=mean_hour,
aes(x=date, y=mean_hour, group=1)) +
geom_line(color = 'red') +
ggtitle('시간대별 평점 평균 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
grid.arrange(count_hour_plot, mean_hour_plot)
mean_hour_plot <- ggplot(data=mean_hour,
aes(x=hour, y=mean_hour, group=1)) +
geom_line(color = 'red') +
ggtitle('시간대별 평점 평균 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
grid.arrange(count_hour_plot, mean_hour_plot)
count_hour_plot <- ggplot(data=count_hour,
aes(x=hour, y=n, group=1)) +
geom_bar(color = 'red') +
ggtitle('시간대별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
count_hour_plot
count_hour_plot <- ggplot(data=count_hour,
aes(x=hour, y=n, group=1)) +
geom_bar(stat="identity",color = 'red') +
ggtitle('시간대별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
count_hour_plot
count_hour_plot <- ggplot(data=count_hour,
aes(x=hour, y=n, group=1)) +
geom_bar(stat="identity", fill=rainbow(24)) +
ggtitle('시간대별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
count_hour_plot
count_hour_plot
mean_hour_plot <- ggplot(data=mean_hour,
aes(x=hour, y=mean_hour, group=1)) +
geom_bar(stat="identity", fill=rainbow(24)) +
ggtitle('시간대별 평점 평균 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
mean_hour_plot
mean_hour_plot <- ggplot(data=mean_hour,
aes(x=hour, y=mean_hour, group=1)) +
geom_line(color = 'red') +
ggtitle('시간대별 평점 평균 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
grid.arrange(count_hour_plot, mean_hour_plot)
# 개별발표
for (i in sample(x=1:23)) {
print(students[i])
}
# 발표순서 정하기
students <- c('김상규', '김영진', '김준성', '김희범', '남궁하영', '류경민',
'민다희', '박성지', '박수민', '박진원', '신은총', '안수현',
'오진영', '이경욱', '이웅희', '이희철', '임도균', '임원기',
'전수연', '조병무', '최용호', '최준혁', '황성윤')
# 개별발표
for (i in sample(x=1:23)) {
print(students[i])
}
# 개별발표
for (i in sample(x=1:23)) {
print(students[i])
}
# 조별발표
for (group in sample(x=1:6)) {
print(group)
}
# 개별발표
order <- sample(x=1:23)
order
print(students[order[1]])
# 개별발표
for (i in sample(x=1:23)) {
readline('Press Enter Key')
print(students[i])
}
# 조별발표
for (group in sample(x=1:6)) {
readline('Press Enter Key: ')
print(group)
}
library(rJava)
library(KoNLP)
library(xlsx)
setwd("D:/Workspace/R_Project/01_Crawling")
df_aladdin <- read.xlsx("aladdin.xlsx", 1, encoding="UTF-8")
library(stringr)
library(dplyr)
library(wordcloud)
library(wordcloud2)
library(ggplot2)
library(gridExtra)
library(extrafont)
windowsFonts(myfont = "맑은 고딕")
theme_update(text=element_text(family="myfont"))
useSejongDic()
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
write.csv(df_aladdin$review, "aladdin_review.csv", row.names = F)
lines <- read.csv("aladdin_review.csv")
lines <- as.character(lines$x)
raw_words <- sapply(lines, extractNoun, USE.NAMES = F)
words <- unlist(raw_words)
words <- str_replace_all(words, "[^[:alpha:]]", "")
words <- Filter(function(x) {nchar(x) >= 2}, words)
words <- Filter(function(x) {nchar(x) <= 10}, words)
words <- gsub(" ", "", words)
words <- gsub('[~!/@#$%&*^()"_+=?<>]', "", words)
words <- gsub('[ㄱ-ㅎ]', "", words)
words <- gsub('(ㅜ|ㅠ)', "", words)
words <- gsub("\\d+", "", words)
write(words, "aladdin_words.txt")
reviews <- read.table("aladdin_words.txt")
wordcount <- table(reviews)
head(sort(wordcount, decreasing = T), 30)
rmwords <- c('영화', '진짜', '알라딘', '관람객', '관람', '관')
for (rmword in rmwords) {
words <- gsub(rmword, "", words)
}
funwords <- c('재밌게','재밌고','재밌었','재밌어요','재밌네요',
'재밌었고','재밌었음','재밌었어요')
for (funword in funwords) {
words <- gsub(funword, '재미', words)
}
write(words, "aladdin_words.txt")
reviews <- read.table("aladdin_words.txt")
wordcount <- table(reviews)
head(sort(wordcount, decreasing = T), 30)
set.seed(123)
palete <- brewer.pal(12, 'Paired')
par(mai=rep(0,4))
wordcloud(names(wordcount), freq=wordcount,
scale = c(5,0.3), rot.per = 0.1,
min.freq = 20, random.order = F,
random.color = T, colors = palete, family="myfont")
wordcount_top <- head(sort(wordcount, decreasing = T), 300)
wordcloud2(wordcount_top, size=2, col="random-light",
backgroundColor="black", shape='circle')
# 2. 평점 분석하기
tmp <- strptime(df_aladdin$time, '%Y.%m.%d')
df_aladdin$date <- as.character(tmp)
df_aladdin$hour <- as.character(strptime(df_aladdin$time, "%Y.%m.%d %H"))
df_aladdin$score <- as.numeric(as.character(df_aladdin$score))
head(aladdin)
# 2019년 5/23 ~ 7/7 까지 평점 변화
# 일별 평점 갯수
df_aladdin <- filter(df_aladdin, date !='2019-07-08')
df_aladdin$date <- str_sub(df_aladdin$date, 6)
count_review <- df_aladdin %>%
group_by(date) %>%
tally()
count_score_plot <- ggplot(data=count_review,
aes(x=date, y=n, group=1)) +
geom_line(color = 'red') +
ggtitle('일별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
# 일별 평점 평균
mean_score <- df_aladdin %>%
group_by(date) %>%
summarise(mean_point = mean(score, na.rm = T))
mean_score_plot <- ggplot(data=mean_score,
aes(x=date, y=mean_point, group=1)) +
geom_line(color = 'red') +
ggtitle('일별 평점 평균 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
grid.arrange(count_score_plot, mean_score_plot)
# 시간대별 평점 갯수
df_aladdin$hour <- str_sub(df_aladdin$hour, 12, 13)
count_hour <- df_aladdin %>%
group_by(hour) %>%
tally()
count_hour_plot <- ggplot(data=count_hour,
aes(x=hour, y=n, group=1)) +
geom_bar(stat="identity", fill=rainbow(24)) +
ggtitle('시간대별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
# 시간대별 평점 평균
mean_hour <- df_aladdin %>%
group_by(hour) %>%
summarise(mean_hour = mean(score, na.rm = T))
mean_hour_plot <- ggplot(data=mean_hour,
aes(x=hour, y=mean_hour, group=1)) +
geom_line(color = 'red') +
ggtitle('시간대별 평점 평균 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
grid.arrange(count_hour_plot, mean_hour_plot)
count_score_plot <- ggplot(data=count_review,
aes(x=date, y=n, group=1)) +
geom_bar(stat="identity") +
ggtitle('일별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
count_score_plot
count_score_plot <- ggplot(data=count_review,
aes(x=date, y=n, group=1)) +
geom_bar(stat="identity", fill=rainbow(46)) +
ggtitle('일별 평점 갯수 추이') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.title = element_text(face = 'bold', size = 15,
vjust=2, hjust=0.5))
count_score_plot
df_aladdin$weekday <- wday(df_aladdin$date, label=T)
library(lubridate)
df_aladdin$weekday <- wday(df_aladdin$date, label=T)
df_aladdin$weekday <- wday(tmp, label=T)
df_aladdin$weekday <- wday(str_sub(tmp, 1, 10), label=T)
str(tmp)
df_aladdin$weekday <- weekdays(str_sub(tmp, 1, 10), label=T)
df_aladdin$weekday <- weekdays(str_sub(tmp, 1, 10))
df_aladdin$weekday <- wday(as.Date(tmp), label=T)
df_aladdin$weekday
df_aladdin$weekday <- wday(as.Date(df_aladdin$time), label=T)
df_aladdin$weekday <- wday(tmp, label=T)
df_aladdin$weekday
tmp
as.Date(tmp)
str(as.Date(tmp))
wday(as.Date(tmp))
df_aladdin$weekday <- wday(as.Date(tmp), label=T)
# 2. 평점 분석하기
tmp <- strptime(df_aladdin$time, '%Y.%m.%d')
df_aladdin$date <- as.character(tmp)
df_aladdin$hour <- as.character(strptime(df_aladdin$time, "%Y.%m.%d %H"))
df_aladdin$weekday <- wday(as.Date(tmp), label=T)
head(aladdin)
head(df_aladdin)
# 조별발표
for (group in sample(x=1:6)) {
readline('Press Enter Key: ')
print(group)
}
# Download pandoc 2.7.1 built with ghc-8.6.4, and instruct
# RStudio + rmarkdown to use it.
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
