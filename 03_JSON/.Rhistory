html_node('a') %>%
html_text()
li %>%
html_node('div.name._ccr(lst.from)') %>%
html_node('a') %>%
html_text()
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
for (li in lis) {
li %>%
html_node('div.name._ccr(lst.from)') %>%
html_node('a') %>%
html_text()
}
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
for (li in lis) {
li %>%
html_node('div.name._ccr(lst\.from)') %>%
html_node('a') %>%
html_text()
}
html %>%
html_node('#list_for_view') %>%
html_node('li') -> li
li
#html_nodes('li') -> lis
li %>%
html_node('div.name')
#html_nodes('li') -> lis
li %>%
html_node('div.name') %>%
html_node('a')
#html_nodes('li') -> lis
li %>%
html_node('div.name') %>%
html_text('a')
#html_nodes('li') -> lis
li %>%
html_node('div.name') %>%
html_node('a') %>% html_text()
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
li %>%
html_node('div.name')
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
lis
li <- lis[1]
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
for (i in 1:20) {
lis[i] %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
for (i in 1:20) {
lis[i] %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
#페이지 소스 읽어오기
html <- remDr$getPageSource()[[1]]
html <- read_html(html)
html %>%
html_node('#list_for_view') %>%
html_nodes('li') -> lis
for (i in 1:20) {
lis[i] %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
li <- lis[1]
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
for (li in lis) {
print(li)
}
html %>%
html_node('#list_for_view') %>%
html_node('ol.mailList.sender_context') %>%
html_nodes('li') -> lis
for (li in lis) {
print(li)
}
for (li in lis) {
#print(li)
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
for (li in lis) {
print(li)
}
html %>%
html_node('#list_for_view') %>%
html_nodes('ol>li') -> lis
for (li in lis) {
print(li)
}
for (li in lis) {
#print(li)
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
sender <- c()
#print(li)
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') -> tmp
print(tmp)
}
mail_texts <- remDr$findElement(using="id", value="list_for_view")
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() -> tmp
print(tmp)
}
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
print(tmp)
}
mail_texts <- remDr$findElement(using="id", value="list_for_view")
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
print(str_sub(tmp, 7, -1))
}
subject <- c()
time <- c()
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('iDate') %>%
html_text() -> tmp
print(tmp)
}
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('.iDate') %>%
html_text() -> tmp
print(tmp)
}
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('.iDate') %>%
html_text() -> tmp
time <- c(time, str_sub(tmp, 6, -1))
}
df_mail <- data.frame(sender=sender, subject=subject, time=time)
sender <- c()
subject <- c()
time <- c()
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('.iDate') %>%
html_text() -> tmp
time <- c(time, str_sub(tmp, 6, -1))
}
df_mail <- data.frame(sender=sender, subject=subject, time=time)
df_mail
remDr$close()
# Google에 로그인한 후 gmail 가져오기
library(RSelenium)
library(rvest)
library(dplyr)
library(stringr)
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
remDr<-remoteDriver(remoteServerAddr="localhost", port=4445L, browserName="chrome")
remDr$open()
remDr$navigate("https://accounts.google.com/signin/v2/identifier?continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&service=mail&sacu=1&rip=1&flowName=GlifWebSignIn&flowEntry=ServiceLogin")
txt_id <- remDr$findElement(using="css selector", '#identifierId')
next_btn <- remDr$findElement(using="css selector", '.RveJvd.snByac')
txt_id$setElementAttribute("value", "ckiekim@gmail.com")     # 아이디 입력
next_btn$clickElement()
txt_pw <- remDr$findElement(using="css selector", '.whsOnd.zHQkBf')
next_btn <- remDr$findElement(using="css selector", '.RveJvd.snByac')
txt_pw$sendKeysToElement(list("kim11067"))
next_btn$clickElement()
html <- remDr$getPageSource()[[1]]
html <- read_html(html)
html %>%
html_node('table.F.cf.zt') %>%
html_nodes('tbody>tr') -> trs
sender <- c()
subject <- c()
time <- c()
for (tr in trs) {
tr %>%
html_node('td.yX.xY') %>%
html_node('div') %>%
html_nodes('span') -> spans
len <- length(spans)
sender <- c(sender, html_text(spans[1]))       # Sender
subject <- c(subject, html_text(spans[len-1]))     # Subject
time <- c(time, html_text(spans[len]))           # Time
}
df_mail <- data.frame(sender=sender, subject=subject, time=time)
df_mail
remDr$close()
states.cor <- cor(states[2:5])
# 다중회귀분석
state.x77
states <- as.data.frame(state.x77[,c("Murder","Population",
"Illiteracy","Income","Frost")])
fit <- lm(Murder ~ Population+Illiteracy+Income+Frost, data=states)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
states.cor <- cor(states[2:5])
states.cor
# VIF 계산
summary(vif(fit))
library(car)
install.packages('car')
# VIF 계산
library(car)
summary(vif(fit))
summary(vif(fit))
fit1 <- lm(Murder ~ ., data=states)
vif(fit)
# Condition Number
eigen.val <- eigen(states.cor)$values
eigen.val
sqrt(max(eigen.val)/eigen.val)
lines <- read.csv("reply1.csv", stringsAsFactors = F)
# 1. 워드 클라우드 만들기
library(rJava)
library(KoNLP)
library(stringr)
library(dplyr)
library(wordcloud)
library(ggplot2)
lines <- read.csv("reply1.csv", stringsAsFactors = F)
lines <- read.csv("D:/Workspace/R_Project/01_Crawling/reply1.csv", stringsAsFactors = F)
str(lines)
lines2 <- head(lines, 100)
raw_words <- sapply(lines, extractNoun, USE.NAMES = F)
# 발표순서 정하기
students <- c('김상규', '김영진', '김준성', '김희범', '남궁하영', '류경민',
'민다희', '박성지', '박수민', '박진원', '신은총', '안수현',
'오진영', '이경욱', '이웅희', '이희철', '임도균', '임원기',
'전수연', '조병무', '최용호', '최준혁', '황성윤')
# 개별발표
for (i in sample(x=1:23)) {
readline('Press Enter Key: ')
print(students[i])
}
library(rvest)
library(httr)
library(jsonlite)
library(dplyr)
base_url <- "http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg"
ServiceKey <- '7t1%2BJu7GtCa%2BLEPxtUypI5MoMfYEvnA77nfvT%2FA3snI9YBNqDRmfdsuYAh5kAxsXae1vs%2FX9WdowCCoQHbuJwQ%3D%3D'
searchYearCd <- 2017
siDo <- 30    # 대전광역시
guGun <- 170  # 서구
numOfRows <- 10
pageNo <- 1
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&type=json')
data <- fromJSON(callback_url)
str(data)
responsData <- fromJSON(callback_url)
cat("결과 코드 =", responsData$resultCode)
cat("결과 메시지 =", responsData$resultMsg)
df_accidents <- responsData$items$item
df_accidents
str(df_accidents)
cat("총 건수 =", responsData$totalCount)
df2 <- df_accidents[-13]
str(df2)
geoms <- df_accidents$geom_json
str(geom)
str(geoms)
str(fromJSON(geom))
for (geom in geoms) {
str(fromJSON(geom))
}
setwd('D:/Workspace/R_Project/03_JSON')
write.csv(df_accidents[-13], '사고다발지역')
write.csv(df_accidents[-13], '사고다발지역.csv')
for (geom in geoms) {
a <- fromJSON(geom)
str(a$coordinates)
}
for (geom in geoms) {
a <- fromJSON(geom)
str(a$coordinates)
class(a$coordinates)
}
for (geom in geoms) {
a <- fromJSON(geom)
str(a$coordinates)
class(a$coordinates)
}
for (geom in geoms) {
a <- fromJSON(geom)
str(a$coordinates)
class(a$coordinates)
print(a$coordinates)
}
for (geom in geoms) {
a <- fromJSON(geom)
str(a$coordinates)
class(a$coordinates)
print(a$coordinates[1,,])
}
length(geoms)
str(geoms)
for (i in 1:length(geoms)) {
geom <- fromJSON(geoms[i])
write.csv(geom[1,,], paste0("polygon", i, ".csv"))
}
for (i in 1:length(geoms)) {
geom <- fromJSON(geoms[i])
write.csv(geom$coordinates[1,,], paste0("polygon", i, ".csv"))
}
install.packages("openxlsx")
library(openxlsx)
geoms <- df_accidents$geom_json
str(geoms)
wb <- createWorkbook()
for (i in 1:length(geoms)) {
geom <- fromJSON(geoms[i])
str(geom)
# write.csv(geom$coordinates[1,,], paste0("polygon", i, ".csv"))
addWorksheet(wb, paste0("polygon", i))
writeDataTable(wb, paste0("polygon", i), geom$coordinates[1,,])
}
wb <- createWorkbook()
for (i in 1:length(geoms)) {
geom <- fromJSON(geoms[i])
str(geom)
# write.csv(geom$coordinates[1,,], paste0("polygon", i, ".csv"))
addWorksheet(wb, paste0("polygon", i))
writeDataTable(wb, paste0("polygon", i), as.data.frame(geom$coordinates[1,,]))
}
saveWorkbook(wb, file="polygon.xlsx")
wb <- createWorkbook()
for (i in 1:length(geoms)) {
geom <- fromJSON(geoms[i])
str(geom)
# write.csv(geom$coordinates[1,,], paste0("olygon", i, ".csv"))
df_geom <- as.data.frame(geom$coordinates[1,,])
names(df_geom) <- c("경도", "위도")
addWorksheet(wb, paste0("polygon", i))
writeDataTable(wb, paste0("polygon", i), )
}
wb <- createWorkbook()
for (i in 1:length(geoms)) {
geom <- fromJSON(geoms[i])
str(geom)
# write.csv(geom$coordinates[1,,], paste0("olygon", i, ".csv"))
df_geom <- as.data.frame(geom$coordinates[1,,])
names(df_geom) <- c("경도", "위도")
addWorksheet(wb, paste0("polygon", i))
writeDataTable(wb, paste0("polygon", i), df_geom)
}
saveWorkbook(wb, file="polygon.xlsx")
responsData$items
str(responsData$items)
library(jsonlite)
library(openxlsx)
base_url <- "http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg"
ServiceKey <- '7t1%2BJu7GtCa%2BLEPxtUypI5MoMfYEvnA77nfvT%2FA3snI9YBNqDRmfdsuYAh5kAxsXae1vs%2FX9WdowCCoQHbuJwQ%3D%3D'
searchYearCd <- 2017
siDo <- 30    # 대전광역시
guGun <- 170  # 서구
numOfRows <- 10
pageNo <- 1
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&type=json')
responsData <- fromJSON(callback_url)
str(responsData)
cat("결과 코드 =", responsData$resultCode)
cat("결과 메시지 =", responsData$resultMsg)
cat("총 건수 =", responsData$totalCount)
str(responsData$items)
df_accidents <- responsData$items$item
str(df_accidents)
setwd('D:/Workspace/R_Project/03_JSON')
write.csv(df_accidents[-13], '사고다발지역.csv')
geoms <- df_accidents$geom_json
str(geoms)
wb <- createWorkbook()
for (i in 1:length(geoms)) {
geom <- fromJSON(geoms[i])
str(geom)
# write.csv(geom$coordinates[1,,], paste0("olygon", i, ".csv"))
df_geom <- as.data.frame(geom$coordinates[1,,])
names(df_geom) <- c("경도", "위도")
addWorksheet(wb, paste0("polygon", i))
writeDataTable(wb, paste0("polygon", i), df_geom)
}
saveWorkbook(wb, file="polygon.xlsx")
