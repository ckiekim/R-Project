for (li in lis) {
print(li)
}
for (li in lis) {
#print(li)
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
for (li in lis) {
print(li)
}
html %>%
html_node('#list_for_view') %>%
html_nodes('ol>li') -> lis
for (li in lis) {
print(li)
}
for (li in lis) {
#print(li)
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text()
}
sender <- c()
#print(li)
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') -> tmp
print(tmp)
}
mail_texts <- remDr$findElement(using="id", value="list_for_view")
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() -> tmp
print(tmp)
}
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
print(tmp)
}
mail_texts <- remDr$findElement(using="id", value="list_for_view")
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
print(str_sub(tmp, 7, -1))
}
subject <- c()
time <- c()
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('iDate') %>%
html_text() -> tmp
print(tmp)
}
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('.iDate') %>%
html_text() -> tmp
print(tmp)
}
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('.iDate') %>%
html_text() -> tmp
time <- c(time, str_sub(tmp, 6, -1))
}
df_mail <- data.frame(sender=sender, subject=subject, time=time)
sender <- c()
subject <- c()
time <- c()
for (li in lis) {
li %>%
html_node('div.name') %>%
html_node('a') %>%
html_text() -> tmp
sender <- c(sender, tmp)
li %>%
html_node('div.subject') %>%
html_node('a') %>%
html_node('strong') %>%
html_text() %>%
trim() -> tmp
subject <- c(subject, str_sub(tmp, 7, -1))
li %>%
html_node('.iDate') %>%
html_text() -> tmp
time <- c(time, str_sub(tmp, 6, -1))
}
df_mail <- data.frame(sender=sender, subject=subject, time=time)
df_mail
remDr$close()
# Google에 로그인한 후 gmail 가져오기
library(RSelenium)
library(rvest)
library(dplyr)
library(stringr)
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
remDr<-remoteDriver(remoteServerAddr="localhost", port=4445L, browserName="chrome")
remDr$open()
remDr$navigate("https://accounts.google.com/signin/v2/identifier?continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&service=mail&sacu=1&rip=1&flowName=GlifWebSignIn&flowEntry=ServiceLogin")
txt_id <- remDr$findElement(using="css selector", '#identifierId')
next_btn <- remDr$findElement(using="css selector", '.RveJvd.snByac')
txt_id$setElementAttribute("value", "ckiekim@gmail.com")     # 아이디 입력
next_btn$clickElement()
txt_pw <- remDr$findElement(using="css selector", '.whsOnd.zHQkBf')
next_btn <- remDr$findElement(using="css selector", '.RveJvd.snByac')
txt_pw$sendKeysToElement(list("kim11067"))
next_btn$clickElement()
html <- remDr$getPageSource()[[1]]
html <- read_html(html)
html %>%
html_node('table.F.cf.zt') %>%
html_nodes('tbody>tr') -> trs
sender <- c()
subject <- c()
time <- c()
for (tr in trs) {
tr %>%
html_node('td.yX.xY') %>%
html_node('div') %>%
html_nodes('span') -> spans
len <- length(spans)
sender <- c(sender, html_text(spans[1]))       # Sender
subject <- c(subject, html_text(spans[len-1]))     # Subject
time <- c(time, html_text(spans[len]))           # Time
}
df_mail <- data.frame(sender=sender, subject=subject, time=time)
df_mail
remDr$close()
states.cor <- cor(states[2:5])
# 다중회귀분석
state.x77
states <- as.data.frame(state.x77[,c("Murder","Population",
"Illiteracy","Income","Frost")])
fit <- lm(Murder ~ Population+Illiteracy+Income+Frost, data=states)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
states.cor <- cor(states[2:5])
states.cor
# VIF 계산
summary(vif(fit))
library(car)
install.packages('car')
# VIF 계산
library(car)
summary(vif(fit))
summary(vif(fit))
fit1 <- lm(Murder ~ ., data=states)
vif(fit)
# Condition Number
eigen.val <- eigen(states.cor)$values
eigen.val
sqrt(max(eigen.val)/eigen.val)
lines <- read.csv("reply1.csv", stringsAsFactors = F)
# 1. 워드 클라우드 만들기
library(rJava)
library(KoNLP)
library(stringr)
library(dplyr)
library(wordcloud)
library(ggplot2)
lines <- read.csv("reply1.csv", stringsAsFactors = F)
lines <- read.csv("D:/Workspace/R_Project/01_Crawling/reply1.csv", stringsAsFactors = F)
str(lines)
lines2 <- head(lines, 100)
raw_words <- sapply(lines, extractNoun, USE.NAMES = F)
# 발표순서 정하기
students <- c('김상규', '김영진', '김준성', '김희범', '남궁하영', '류경민',
'민다희', '박성지', '박수민', '박진원', '신은총', '안수현',
'오진영', '이경욱', '이웅희', '이희철', '임도균', '임원기',
'전수연', '조병무', '최용호', '최준혁', '황성윤')
# 개별발표
for (i in sample(x=1:23)) {
readline('Press Enter Key: ')
print(students[i])
}
install.packages('jsonlite')
library(jsonlite)
library(httr)
df_repos <- fromJSON("https://api.github.com/users/hadley/repos")
str(df_repos)
View(df_repos)
names(df_repos)
names(df_repos$owner)
# Converting R DataFrame to JSON
json_repos <- toJSON(df_repos)
cat(json_repos)
minify(json_repos)
prettify(json_repos)
setwd('D:/Workspace/R_Project/03_JSON')
data <- fromJSON('sample_json.txt')
data
str(data)
data <- data.frame(data)
str(data)
names(data) <- c('id', 'like', 'share', 'commnet', 'unique', 'msg', 'time')
str(data)
data$like <- as.character(data$like)
data$like <- as.numeric(as.character(data$like))
str(data)
# CSV 파일로 저장
write.csv(data, 'data.csv')
# Data Frame을 JSON 파일로 저장
json_data <- toJSON(data)
write(json_data, 'data.json')
prettify(json_data)
data <- fromJSON('sample_json.txt')    # JSON 파일 읽기
str(data)
data <- as.data.frame(data)     # Data Frame으로 변환
str(data)
names(data) <- c('id', 'like', 'share', 'comment', 'unique', 'msg', 'time')
data$like <- as.numeric(as.character(data$like))
# CSV 파일로 저장
write.csv(data, 'data.csv')
# Data Frame을 JSON 파일로 저장
json_data <- toJSON(data)
write(json_data, 'data.json')
prettify(json_data)
name <- c("Test")
age <- c(25)
sex <- c("F")
address <- c("Seoul")
hobby <- c("Basketball")
df_person <- data.frame(name, age, sex, address, hobby)
names(df_person) <- c("Name", "Age", "Sex", "Address", "Hobby")
str(df_person)
json_person <- toJSON(df_person)
prettify(json_person)
person <- fromJSON(json_person)
str(person)
# ==========================================
df_json_person <- fromJSON(json_person)
str(df_json_person)
person <- data.frame(name, age, sex, address, hobby)
names(person) <- c("Name", "Age", "Sex", "Address", "Hobby")
str(person)
all(person == df_json_person)
# ==========================================
df_json_person <- fromJSON(json_person, stringAsFactors=F)
?fromJSON()
cars
json_cars <- toJSON(cars)
df_json_cars <- fromJSON(json_cars)
all(cars == df_json_cars)
pi
fromJSON(toJSON(pi, digits = 3))
toJSON(pi, digits = 3)
json_pi <- toJSON(pi, digits = 3)
json_pi
pi
fromJSON(json_pi)
json_city <- toJSON(city)
city <- '대전'
json_city <- toJSON(city)
fromJSON(json_city)
json_subject <- toJSON(subject)
fromJSON(json_subject)
subject <- c('국어', '영어', '수학')
json_subject <- toJSON(subject)
fromJSON(json_subject)
pr <- fromJSON("person.json")
str(pr)
pr
# person.json 파일로 부터 읽기
wiki_person <- fromJSON("person.json")
str(wiki_person)
class(wiki_person)
get.result = GET(callback_url)
callback_url <- "http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg"
get.result = GET(callback_url)
html = htmlParse(get.result, encoding = "UTF-8")
View(get.result)
# 공공데이터포털 API 이용하여 데이터 가져오기
# 지자체별 사고다발지역정보 조회 서비스
# https://www.dropbox.com/s/ykc5zwsmmh13cgh/sample.json?dl=0
base_url <- "http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg"
ServiceKey <- '7t1%2BJu7GtCa%2BLEPxtUypI5MoMfYEvnA77nfvT%2FA3snI9YBNqDRmfdsuYAh5kAxsXae1vs%2FX9WdowCCoQHbuJwQ%3D%3D'
searchYearCd <- 2018
siDo <- 30    # 대전광역시
guGun <- 170  # 서구
numOfRows <- 10
pageNo <- 1
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows, '&pageNo=', pageNo)
get.result = GET(callback_url)
html = htmlParse(get.result, encoding = "UTF-8")
View(get.result)
# 공공데이터포털 API 이용하여 데이터 가져오기
# 지자체별 사고다발지역정보 조회 서비스
# https://www.dropbox.com/s/ykc5zwsmmh13cgh/sample.json?dl=0
library(httr)
html = htmlParse(get.result, encoding = "UTF-8")
View(get.result)
get.result$content
fromJSON(get.result$content)
# 공공데이터포털 API 이용하여 데이터 가져오기
# 지자체별 사고다발지역정보 조회 서비스
# https://www.dropbox.com/s/ykc5zwsmmh13cgh/sample.json?dl=0
library(rvest)
a <- read_html(callback_url)
a
accidents <- fromJSON(callback_url)
accidents <- fromJSON(get.result$content)
http_type(get.result)
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&_type=json')
get.result = GET(callback_url)
http_type(get.result)
View(get.result)
View(get.result)
library(dplyr)
http_error(get.result)
jsonRespText<-content(get.result, as="text")
jsonRespText
jsonRespParsed<-content(get.result, as="parsed")
jsonRespParsed
fromJSON(jsonRespParsed)
fromJSON(jsonRespText)
str(jsonRespParsed)
fromJSON(jsonRespText)
modJson<-jsonRespParsed$doc
modJson
jsonRespParsed
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&_returnType=json')
get.result = GET(callback_url)
http_type(get.result)
http_error(get.result)
jsonRespText <- content(get.result, as="text")
jsonRespParsed <- content(get.result, as="parsed")
str(jsonRespParsed)
modJson<-jsonRespParsed$node
modJson
write(jsonRespText, "tmp")
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&_returnType=json')
get.result = GET(callback_url)
http_type(get.result)
http_error(get.result)
jsonRespText <- content(get.result, as="text")
write(jsonRespText, "tmp")
jsonRespParsed <- content(get.result, as="parsed")
str(jsonRespParsed)
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&type=json')
get.result = GET(callback_url)
jsonRespText <- content(get.result, as="text")
write(jsonRespText, "tmp")
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&type=json')
get.result = GET(callback_url)
http_type(get.result)
jsonRespText <- content(get.result, as="text")
write(jsonRespText, "tmp")
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&type=json')
get.result = GET(callback_url)
http_type(get.result)
http_error(get.result)
jsonRespText <- content(get.result, as="text")
write(jsonRespText, "tmp")
jsonRespParsed <- content(get.result, as="parsed")
str(jsonRespParsed)
itemJson<-jsonRespParsed$items
itemJson
itemJson
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&type=json')
get.result = GET(callback_url)
http_type(get.result)
jsonRespParsed <- content(get.result, as="parsed")
str(jsonRespParsed)
data <- fromJSON(callback_url)
str(data)
data$pageNo
data$items
callback_url
numOfRows <- 2
searchYearCd <- 2017
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&type=json')
data <- fromJSON(callback_url)
str(data)
numOfRows <- 10
pageNo <- 1
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&type=json')
data <- fromJSON(callback_url)
str(data)
data$items
str(data$items)
str(data$items$item)
df_accidents <- data$items$item
df_accidents$geom <- fromJSON(df_accidents$geom_json)
fromJSON(df_accidents$geom_json)
geom <- df_accidents$geom_json
str(geom)
write(data, "tmp.txt")
data <- fromJSON(callback_url)
write(data, "tmp.txt")
write.csv(df_accidents, "tmp.txt")
df_accidents
aa <- '{"type":"Polygon","coordinates":[[[127.379732390757,36.3513380575063],[127.379706499443,36.3511263351866],[127.379629820488,36.3509227486939],[127.379505300622,36.3507351218363],[127.379337725075,36.3505706651482],[127.379133533679,36.3504356987728],[127.378900573395,36.3503354095568],[127.378647796758,36.3502736516983],[127.378384917831,36.3502527986104],[127.378122038904,36.3502736516983],[127.377869262267,36.3503354095568],[127.377636301983,36.3504356987728],[127.377432110587,36.3505706651482],[127.377264535039,36.3507351218363],[127.377140015174,36.3509227486939],[127.377063336219,36.3511263351866],[127.377037444905,36.3513380575063],[127.377063336219,36.3515497792502],[127.377140015174,36.3517533641032],[127.377264535039,36.3519409885068],[127.377432110587,36.3521054423002],[127.377636301983,36.352240405781],[127.377869262267,36.352340692543],[127.378122038904,36.3524024487618],[127.378384917831,36.3524233012739],[127.378647796758,36.3524024487618],[127.378900573395,36.352340692543],[127.379133533679,36.352240405781],[127.379337725075,36.3521054423002],[127.379505300622,36.3519409885068],[127.379629820488,36.3517533641032],[127.379706499443,36.3515497792502],[127.379732390757,36.3513380575063]]]}'
fromJSON(aa)
str(geom)
geoms <- df_accidents$geom_json
for (geom in geoms) {
fromJSON(geom)
}
fromJSON(geoms[1])
for (geom in geoms) {
str(fromJSON(geom))
}
str(data)
